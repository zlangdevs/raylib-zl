struct Vector2 { ?? L215
    x f32,
    y f32,
}

fun v2pack(self: Vector2) >> simd<f32, 2> {
    simd<f32, 2> res = {self.x, self.y};
    return res;
}

fun v2unpack(self: simd<f32, 2>) >> Vector2 {
    Vector2 res = Vector2{x = self[0], y = self[1]};
    return res;
}

struct Vector3 { ?? L221
    x f32,
    y f32,
    z f32,
}

struct Vector4 { ?? L228
    x f32,
    y f32,
    z f32,
    w f32,
}

fun v4pack(self: Vector4) >> simd<f32, 4> {
    simd<f32, 4> res = {self.x, self.y, self.z, self.w};
    return res;
}

fun v4unpack(self: simd<f32, 4>) >> Vector4 {
    Vector4 res = Vector4{x = self[0], y = self[1], z = self[2], w = self[3]};
    return res;
}

struct Matrix { ?? L239
    m0   f32,
    m1   f32,
    m2   f32,
    m3   f32,
    m4   f32,
    m5   f32,
    m6   f32,
    m7   f32,
    m8   f32,
    m9   f32,
    m10  f32,
    m11  f32,
    m12  f32,
    m13  f32,
    m14  f32,
    m15  f32,
}

struct Color { ?? L247
    r u8,
    g u8,
    b u8,
    a u8,
}

fun cpack(self: Color) >> u32 {
    return (self.r as i32) |
           ((self.g as i32) << 8) |
           ((self.b as i32) << 16) |
           ((self.a as i32) << 24);
}

struct Image { ?? L263
    data    ptr<void>,
    width   i32,
    height  i32,
    mipmaps i32,
    format  i32,
}

struct Texture { ?? L272
    id      u32,
    width   i32,
    height  i32,
    mipmaps i32,
    format  i32,
}

struct Camera3D { ?? L326
    position    Vector3,
    target      Vector3,
    up          Vector3,
    fovy        f32,
    projection  i32,
}

struct Mesh { ?? L345
    vertexCount     i32,
    triangleCount   i32,
    vertices        ptr<f32>,
    texcoords       ptr<f32>,
    texcoords2      ptr<f32>,
    normals         ptr<f32>,
    tangents        ptr<f32>,
    colors          ptr<u8>,
    indices         ptr<u16>,
    animVertices    ptr<f32>,
    animNormals     ptr<f32>,
    boneIds         ptr<u8>,
    boneWeights     ptr<f32>,
    boneMatrices    ptr<Matrix>,
    boneCount       i32,
    vaoId           u32,
    vboId           ptr<u32>,
}

struct Shader { ?? L372
    id      u32,
    locs    ptr<int>,
}

struct MaterialMap { ?? L378
    texture     Texture,
    color       i32,
    value       f32,
}

struct Transform { ?? L392
    translation Vector3,
    rotation    simd<f32, 4>,
    scale       Vector3,
}

struct BoneInfo { ?? L399
    name    arr<u8, 32>,
    parent  i32,
}

struct Material { ?? L385
    shader  Shader,
    maps    ptr<MaterialMap>,
    params  arr<f32, 4>,
}

struct Model { ?? L405
    transform       Matrix,
    meshCount       i32,
    materialCount   i32,
    meshes          ptr<Mesh>,
    materials       ptr<Material>,
    meshMaterial    ptr<i32>,
    boneCount       i32,
    bones           ptr<BoneInfo>,
    bindPose        ptr<Transform>,
}

enum ConfigFlags { ?? L541
    FLAG_VSYNC_HINT         = 0x00000040,
    FLAG_FULLSCREEN_MODE    = 0x00000002,
    FLAG_WINDOW_RESIZABLE   = 0x00000004,
    FLAG_WINDOW_UNDECORATED = 0x00000008,
    FLAG_WINDOW_HIDDEN      = 0x00000080,
    FLAG_WINDOW_MINIMIZED   = 0x00000200,
    FLAG_WINDOW_MAXIMIZED   = 0x00000400,
    FLAG_WINDOW_UNFOCUSED   = 0x00000800,
    FLAG_WINDOW_TOPMOST     = 0x00001000,
    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,
    FLAG_WINDOW_TRANSPARENT = 0x00000010,
    FLAG_WINDOW_HIGHDPI     = 0x00002000,
    FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000,
    FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000,
    FLAG_MSAA_4X_HINT       = 0x00000020,
    FLAG_INTERLACED_HINT    = 0x00010000
}

enum KeyboardKey { ?? L576
    KEY_NULL            = 0,        ?? Key: NULL, used for no key pressed
    ?? Alphanumeric keys
    KEY_APOSTROPHE      = 39,       ?? Key: '
    KEY_COMMA           = 44,       ?? Key: ,
    KEY_MINUS           = 45,       ?? Key: -
    KEY_PERIOD          = 46,       ?? Key: .
    KEY_SLASH           = 47,       ?? Key: /
    KEY_ZERO            = 48,       ?? Key: 0
    KEY_ONE             = 49,       ?? Key: 1
    KEY_TWO             = 50,       ?? Key: 2
    KEY_THREE           = 51,       ?? Key: 3
    KEY_FOUR            = 52,       ?? Key: 4
    KEY_FIVE            = 53,       ?? Key: 5
    KEY_SIX             = 54,       ?? Key: 6
    KEY_SEVEN           = 55,       ?? Key: 7
    KEY_EIGHT           = 56,       ?? Key: 8
    KEY_NINE            = 57,       ?? Key: 9
    KEY_SEMICOLON       = 59,       ?? Key: ;
    KEY_EQUAL           = 61,       ?? Key: =
    KEY_A               = 65,       ?? Key: A | a
    KEY_B               = 66,       ?? Key: B | b
    KEY_C               = 67,       ?? Key: C | c
    KEY_D               = 68,       ?? Key: D | d
    KEY_E               = 69,       ?? Key: E | e
    KEY_F               = 70,       ?? Key: F | f
    KEY_G               = 71,       ?? Key: G | g
    KEY_H               = 72,       ?? Key: H | h
    KEY_I               = 73,       ?? Key: I | i
    KEY_J               = 74,       ?? Key: J | j
    KEY_K               = 75,       ?? Key: K | k
    KEY_L               = 76,       ?? Key: L | l
    KEY_M               = 77,       ?? Key: M | m
    KEY_N               = 78,       ?? Key: N | n
    KEY_O               = 79,       ?? Key: O | o
    KEY_P               = 80,       ?? Key: P | p
    KEY_Q               = 81,       ?? Key: Q | q
    KEY_R               = 82,       ?? Key: R | r
    KEY_S               = 83,       ?? Key: S | s
    KEY_T               = 84,       ?? Key: T | t
    KEY_U               = 85,       ?? Key: U | u
    KEY_V               = 86,       ?? Key: V | v
    KEY_W               = 87,       ?? Key: W | w
    KEY_X               = 88,       ?? Key: X | x
    KEY_Y               = 89,       ?? Key: Y | y
    KEY_Z               = 90,       ?? Key: Z | z
    KEY_LEFT_BRACKET    = 91,       ?? Key: [
    KEY_BACKSLASH       = 92,       ?? Key: '\'
    KEY_RIGHT_BRACKET   = 93,       ?? Key: ]
    KEY_GRAVE           = 96,       ?? Key: `
    ?? Function keys
    KEY_SPACE           = 32,       ?? Key: Space
    KEY_ESCAPE          = 256,      ?? Key: Esc
    KEY_ENTER           = 257,      ?? Key: Enter
    KEY_TAB             = 258,      ?? Key: Tab
    KEY_BACKSPACE       = 259,      ?? Key: Backspace
    KEY_INSERT          = 260,      ?? Key: Ins
    KEY_DELETE          = 261,      ?? Key: Del
    KEY_RIGHT           = 262,      ?? Key: Cursor right
    KEY_LEFT            = 263,      ?? Key: Cursor left
    KEY_DOWN            = 264,      ?? Key: Cursor down
    KEY_UP              = 265,      ?? Key: Cursor up
    KEY_PAGE_UP         = 266,      ?? Key: Page up
    KEY_PAGE_DOWN       = 267,      ?? Key: Page down
    KEY_HOME            = 268,      ?? Key: Home
    KEY_END             = 269,      ?? Key: End
    KEY_CAPS_LOCK       = 280,      ?? Key: Caps lock
    KEY_SCROLL_LOCK     = 281,      ?? Key: Scroll down
    KEY_NUM_LOCK        = 282,      ?? Key: Num lock
    KEY_PRINT_SCREEN    = 283,      ?? Key: Print screen
    KEY_PAUSE           = 284,      ?? Key: Pause
    KEY_F1              = 290,      ?? Key: F1
    KEY_F2              = 291,      ?? Key: F2
    KEY_F3              = 292,      ?? Key: F3
    KEY_F4              = 293,      ?? Key: F4
    KEY_F5              = 294,      ?? Key: F5
    KEY_F6              = 295,      ?? Key: F6
    KEY_F7              = 296,      ?? Key: F7
    KEY_F8              = 297,      ?? Key: F8
    KEY_F9              = 298,      ?? Key: F9
    KEY_F10             = 299,      ?? Key: F10
    KEY_F11             = 300,      ?? Key: F11
    KEY_F12             = 301,      ?? Key: F12
    KEY_LEFT_SHIFT      = 340,      ?? Key: Shift left
    KEY_LEFT_CONTROL    = 341,      ?? Key: Control left
    KEY_LEFT_ALT        = 342,      ?? Key: Alt left
    KEY_LEFT_SUPER      = 343,      ?? Key: Super left
    KEY_RIGHT_SHIFT     = 344,      ?? Key: Shift right
    KEY_RIGHT_CONTROL   = 345,      ?? Key: Control right
    KEY_RIGHT_ALT       = 346,      ?? Key: Alt right
    KEY_RIGHT_SUPER     = 347,      ?? Key: Super right
    KEY_KB_MENU         = 348,      ?? Key: KB menu
    ?? Keypad keys
    KEY_KP_0            = 320,      ?? Key: Keypad 0
    KEY_KP_1            = 321,      ?? Key: Keypad 1
    KEY_KP_2            = 322,      ?? Key: Keypad 2
    KEY_KP_3            = 323,      ?? Key: Keypad 3
    KEY_KP_4            = 324,      ?? Key: Keypad 4
    KEY_KP_5            = 325,      ?? Key: Keypad 5
    KEY_KP_6            = 326,      ?? Key: Keypad 6
    KEY_KP_7            = 327,      ?? Key: Keypad 7
    KEY_KP_8            = 328,      ?? Key: Keypad 8
    KEY_KP_9            = 329,      ?? Key: Keypad 9
    KEY_KP_DECIMAL      = 330,      ?? Key: Keypad .
    KEY_KP_DIVIDE       = 331,      ?? Key: Keypad /
    KEY_KP_MULTIPLY     = 332,      ?? Key: Keypad *
    KEY_KP_SUBTRACT     = 333,      ?? Key: Keypad -
    KEY_KP_ADD          = 334,      ?? Key: Keypad +
    KEY_KP_ENTER        = 335,      ?? Key: Keypad Enter
    KEY_KP_EQUAL        = 336,      ?? Key: Keypad =
    ?? Android key buttons
    KEY_BACK            = 4,        ?? Key: Android back button
    KEY_MENU            = 5,        ?? Key: Android menu button
    KEY_VOLUME_UP       = 24,       ?? Key: Android volume up button
    KEY_VOLUME_DOWN     = 25        ?? Key: Android volume down button
}

enum MouseButton { ?? L699
    MOUSE_BUTTON_LEFT    = 0,       ?? Mouse button left
    MOUSE_BUTTON_RIGHT   = 1,       ?? Mouse button right
    MOUSE_BUTTON_MIDDLE  = 2,       ?? Mouse button middle (pressed wheel)
    MOUSE_BUTTON_SIDE    = 3,       ?? Mouse button side (advanced mouse device)
    MOUSE_BUTTON_EXTRA   = 4,       ?? Mouse button extra (advanced mouse device)
    MOUSE_BUTTON_FORWARD = 5,       ?? Mouse button forward (advanced mouse device)
    MOUSE_BUTTON_BACK    = 6,       ?? Mouse button back (advanced mouse device)
}

enum MaterialMapIndex { ?? L757
    MATERIAL_MAP_ALBEDO = 0,        ?? Albedo material (same as: MATERIAL_MAP_DIFFUSE)
    MATERIAL_MAP_METALNESS,         ?? Metalness material (same as: MATERIAL_MAP_SPECULAR)
    MATERIAL_MAP_NORMAL,            ?? Normal material
    MATERIAL_MAP_ROUGHNESS,         ?? Roughness material
    MATERIAL_MAP_OCCLUSION,         ?? Ambient occlusion material
    MATERIAL_MAP_EMISSION,          ?? Emission material
    MATERIAL_MAP_HEIGHT,            ?? Heightmap material
    MATERIAL_MAP_CUBEMAP,           ?? Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
    MATERIAL_MAP_IRRADIANCE,        ?? Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
    MATERIAL_MAP_PREFILTER,         ?? Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
    MATERIAL_MAP_BRDF               ?? Brdf material
}

const i32 MATERIAL_MAP_DIFFUSE = 0; ?? L771

enum CameraMode { ?? L930
    CAMERA_CUSTOM = 0,              ?? Camera custom, controlled by user (UpdateCamera() does nothing)
    CAMERA_FREE,                    ?? Camera free mode
    CAMERA_ORBITAL,                 ?? Camera orbital, around target, zoom supported
    CAMERA_FIRST_PERSON,            ?? Camera first person
    CAMERA_THIRD_PERSON             ?? Camera third person
}

enum CameraProjection { ?? L939
    CAMERA_PERSPECTIVE = 0,         ?? Perspective projection
    CAMERA_ORTHOGRAPHIC             ?? Orthographic projection
}

wrap @InitWindow(width: i32, height: i32, title: ptr<u8>) >> void; ?? L973
wrap @CloseWindow() >> void; ?? L974
wrap @WindowShouldClose() >> bool; ?? L975

fun  @ClearBackground(color: i32) >> void; ?? L1032
fun  ClearBackground(color: Color) >> void {@ClearBackground(color.cpack());}
wrap @BeginDrawing() >> void; ?? L1033
wrap @EndDrawing() >> void; ?? L1034

wrap @BeginMode3D(camera: Camera3D) >> void; ?? L1037
wrap @EndMode3D() >> void; ?? L1038

wrap @SetTargetFPS(fps: i32) >> void; ?? L1079

wrap @SetConfigFlags(flags: u32) >> void; ?? L1100

wrap @IsKeyDown(key: i32) >> bool; ?? L1185

wrap @IsMouseButtonDown(button: i32)>> bool; ?? L1208
wrap @IsMouseButtonReleased(button: i32) >> bool; ?? L1209
fun  @GetMousePosition() >> simd<f32, 2>; ?? L1213
fun  GetMousePosition() >> Vector2 {return v2unpack(@GetMousePosition());}

wrap @UpdateCamera(camera: ptr<Camera3D>, mode: i32) >> void; ?? L1244

fun  @DrawLineBezier(startPos: simd<f32, 2>, endPos: simd<f32, 2>, thick: f32, color: i32) >> void; ?? L1264
fun  DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: f32, color: Color) >> void {
@DrawLineBezier(startPos.v2pack(), endPos.v2pack(), thick, color.cpack());}
fun  @DrawCircle(centerX: i32, centerY: i32, radius: f32, color: i32) >> void;  ?? L1265
fun  DrawCircle(centerX: i32, centerY: i32, radius: f32, color: Color) >> void{
@DrawCircle(centerX, centerY, radius, color.cpack());}
fun  @DrawCircleV(center: simd<f32, 2>, radius: f32, color: i32) >> void; ?? L1269
fun  DrawCircleV(center: Vector2, radius: f32, color: Color) >> void {@DrawCircleV(center.v2pack(), radius, color.cpack());}
fun  @DrawRectangleLines(posX: i32, posY: i32, width :i32, height: i32, color: i32) >> void; ?? L1285
fun  DrawRectangleLines(posX: i32, posY: i32, width :i32, height: i32, color: Color) >> void{
@DrawRectangleLines(posX, posY, width, height, color.cpack());}

fun  @CheckCollisionPointCircle(point: simd<f32, 2>, center: simd<f32, 2>, radius: f32) >> bool; ?? L1323
fun  CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32) >> bool{
return @CheckCollisionPointCircle(point.v2pack(), center.v2pack(), radius);}

wrap @LoadImage(fileName: ptr<u8>) >> Image; ?? 1336
wrap @UnloadImage(image: Image) >> void; ?? L1344

wrap @LoadTextureFromImage(image: Image) >> Texture; ?? L1426
wrap @UnloadTexture(texture: Texture) >> void; ?? L1420
wrap @UpdateTexture(texture: Texture, pixels: ptr<void>) >> void;

fun  @DrawTexture(texture: Texture, posX: i32, posY: i32, tint: i32) >> void; ?? L1442
fun  DrawTexture(texture: Texture, posX: i32, posY: i32, tint: Color) >> void{
@DrawTexture(texture, posX, posY, tint.cpack());}

fun  @DrawText(text: ptr<u8>, posX: i32, posY: i32, fontSize: i32, color: i32) >> void; ?? L1487
fun  DrawText(text: ptr<u8>, posX: i32, posY: i32, fontSize: i32, color: Color) >> void{
@DrawText(text, posX, posY, fontSize, color.cpack());}

wrap @DrawGrid(slices: i32, spacing: f32) >> void; ?? L1564

wrap @LoadModelFromMesh(mesh: Mesh) >> Model; ?? L1572
wrap @UnloadModel(model: Model) >> void;

fun @DrawModel(model: Model, position: Vector3, scale: f32, tint: i32) >> void; ?? L1578
fun DrawModel(model: Model, position: Vector3, scale: f32, tint: Color) >> void{
@DrawModel(model, position, scale, tint.cpack());}

wrap @GenMeshHeightmap(heightmap: Image, size: Vector3) >> Mesh; ?? L1610
